<!DOCTYPE html>
<html ng-app="gameApp">
    <head>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular.min.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular-route.min.js"></script>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
        <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css" />
        <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
        <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">

        <script type="text/javascript" src="scripts/main.js"></script>
        <script src='bower_components/threejs/build/three.js'></script>
        <script src="vendor/require.js/require.js"></script>
        <script src="vendor/three.js/examples/js/Detector.js"></script>
        <script src="vendor/threex.windowresize.js"></script>
        <script src="Models/Car.js"></script>
        <script src="Models/Wheel.js"></script>
        <script src="Models/Ground.js"></script>
        <script src="Models/StreetLight.js"></script>
        <script src="Models/UFO.js"></script>
        <script src="Models/Tree.js"></script>
        <title>Baller</title>
        <style>
            #cs-legend{
                text-align:center;
                position:absolute;
                left:0px;
                top:0px;
                width:100%;
                height:auto;
                z-index:999;
                background-color:#bbbbbb;
            }
            .x{
                color:blue;
            }
            .y{
                color:red;
            }
            .z{
                color:green;
            }
            body{
                background-color: #bbbbbb;
                overflow: hidden;
            }
            #footer {
                width:100%;
                height:auto;
                position:absolute;
                bottom:0;
                left:0;
                background-color:#bbbbbb;
                text-align:center;
            }
            .box{
                width: 800px;
                margin:auto;
            }
        </style>
    </head>
    <body>
        <div class="container" ng-view>
            <!-- Partials insert here -->
        </div>
        <div id="footer">
            <div class="box">
                2015 Baller. Created by Ryan Ballinger and Dan Berridge.
            </div>
        </div>




<script id="vs0" type="x-shader/x-vertex">
/* VERTEX SHADER */
//varying vec4 col;
varying vec3 my_pos;

/* texture coord in THREE.js is "uv" */
varying vec2 my_uv;

void main()
{
    my_pos = position;
    my_uv = uv; /* init from default attrib "uv" */
    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
}
</script>

<script id="fs0" type="x-shader/x-fragment">
/* FRAGMENT SHADER */
//precision mediump float;
//varying vec4 col;
varying vec3 my_pos;
uniform vec4 color_dark;
uniform sampler2D marb_tex;

varying vec2 my_uv;

void main()
{
    if (my_pos.z > 0.0) {
        if (my_pos.x * my_pos.y < 0.0)
           gl_FragColor = color_dark;
        else
           gl_FragColor = vec4 (0.0, 1.0, 0.2, 1.0);
    }
    else {
        gl_FragColor = texture2D (marb_tex, my_uv);
    }
}
</script>


<script id="vs1" type="x-shader/x-vertex">
varying vec4 v_color;

const vec4 light_diffuse = vec4 (1.0, 1.0, 1.0, 1.0);
const vec4 light_specular = vec4 (1.0, 1.0, 1.0, 1.0);
const vec4 material_diffuse = vec4 (0.3, 0.7, 0.4, 1.0);
const vec4 material_specular = vec4 (0.7, 0.1, 0.1, 1.0);

/* assumed the light has been transfromed into Camera CF */
const vec4 light_pos = vec4 (1, 0, 1, 1.0);

void main()
{
   /* light direction is specified w.r.t to eye coordinate,
    * if the light_direction is specified w.r.t to the world
    * coordinate frame, we must also transform it to the eye
    * coordinate (see ec_normal below) */

   /* l vector */
   vec4 ec_pos = modelViewMatrix * vec4(position, 1);
   vec4 light_dir = light_pos - ec_pos;

   /* original INCORRECT code :   light_dir = light_pos - position;  */

   vec4 halfway = light_dir;
   /* eye vector is now 0,0,1 */
   halfway.z += 1.0;
   halfway = normalize(halfway);
   light_dir = normalize(light_dir);

   /* calculate the vertex normal w.r.t to the
    * camera/eye coordinate frame */
   vec4 ec_normal = vec4(normalMatrix * normal, 1.0);

   /* determine the diffuse lighting */
   float n_dot_l = max (0.0, dot(ec_normal, light_dir));
   /* determine the specular lighting */
   float n_dot_h = max (0.0, dot(ec_normal, halfway));

   v_color = n_dot_l * light_diffuse * material_diffuse;
   if (n_dot_h > 0.0)
      v_color += pow (n_dot_h,8.0) * light_specular * material_specular;
   gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
}

</script>

<script id="fs1" type="x-shader/x-fragment">
varying vec4 v_color;

void main () {
	gl_FragColor = v_color;
}
</script>
    </body>

</html>
